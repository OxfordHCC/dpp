{"version":3,"file":"static/js/1.chunk.worker.js","sources":["/Users/alexzugravu/workspace/max/p_tracker/client/web-react/webpack/bootstrap","/Users/alexzugravu/workspace/max/p_tracker/client/web-react/src/workers/intersection.worker.js","/Users/alexzugravu/workspace/max/p_tracker/client/web-react/src/lib/geometry.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./node_modules/babel-loader/lib/index.js?!./node_modules/eslint-loader/dist/cjs.js?!./src/workers/intersection.worker.js\");\n","import { \n\tlatLongToCartesian, \n\tgetIntersections, \n\tcartesianToLatLong \n} from '../lib/geometry.js';\n\nonmessage = (evt) => {\n\tlet { devices, entries, port} = evt.data;\n\tconst stdPll = (entries[0].latitude + entries[entries.length-1].latitude)/2;\n\n\tconst toCartesian = (entry, i) => Object.assign(\n\t\t{},\n\t\t{ r: entry.accuracy || entry.radius, originalIndex: i}, \n\t\tlatLongToCartesian(entry.latitude, entry.longitude, stdPll)\n\t);\n\n\tconst toLatLng = point => Object.assign(\n\t\t{},\n\t\tcartesianToLatLong(point.x, point.y, stdPll)\n\t);\n\t\n\tconst paths = entries.map(toCartesian)\n\t.reduce((acc, curr, i, src)=>{\n\t\tif(i === 0){\n\t\t\treturn acc;\n\t\t}\n\t\tlet last = src[i-1];\n\t\tacc.push([last, curr]);\n\t\treturn acc;\n\t}, []);\n\n\tconst cartesianDevices = devices.map(toCartesian);\n\tconst processed = (getIntersections(paths, cartesianDevices) || [])\n\t.filter((x,i,arr) => {\n\t\tif(arr[i-1] && arr[i-1].deviceIndex === x.deviceIndex){\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t})\n\t.map(({ pathIndex, deviceIndex })=>{\n        const path = paths[pathIndex].map(p => entries[p.originalIndex]);\n        const device = devices[deviceIndex];\n\t\treturn {\n            device,\n            path,\n            startMs: path[0].timestampMs,\n            endMs: path[1].timestampMs,\n            // latitude: device.latitude,\n            // longitude: device.longitude,\n            // accuracy: device.radius,\n            //...device, //assign device's lat long and accuracy\n            detectionType: 'geolocation',\n\t\t}\n\t});\n\n\tif(port){ \n\t\tport.postMessage({ event: \"done\", entries: processed });\n\t\tport.close();\n\t}else{\n\t\tpostMessage({ event: \"done\", entries: processed });\n\t}\n}\n","//TODO: Capitalize point param names\n\n//Get projection of point t on a line (a, b): a line that goes through a and b\nexport function pointProjectionOnLine(t, [a, b]){\n\t//let s be the slope of line (a, b)\n\tlet s = (a.y - b.y) / (a.x - b.x);\n\t//we get the basis(?) of the line, so we can compute the equation of the\n\t//line later\n\tlet bS = a.y - s * a.x;\n\n\t//let r be the slope of the line orthogonal to our line\n\tlet r = - 1 / s;\n\t//since we know that point t is on this line, we can compute the basis of \n\t//this line\n\tlet bR = t.y - r * t.x;\n\n\t//the point we're interested in is on both lines (at the intersection), \n\t//so it satisfies both line equations:\n\t// \t\ty = s * x + bS;\n\t//and \ty = r * x + bR;\n\t//we replace y in the second equation to get x, then get y using x in the first eq.\n\tlet x = (bR - bS) / (s - r);\n\tlet y = s * x + bS;\n\n\treturn {x, y};\n}\n\n//given two overlapping circles, get the middle point of their intersection.\n//c1 - {x, y, r} -> coords and radius of circle 1\n//idm c2\n//d - optional distance param to avoid computing again: usually if this function is called, it's\n//because the distnance has been calculated before.\nexport function getMedianIntersection(c1, c2, d){\n\td = d || distanceCartesian(c1, c2);\n\tlet segment = getIntersectionSegment(c1, c2, d);\n\treturn {\n\t\tx: (segment[0].x + segment[1].x)/2,\n\t\ty: (segment[0].y + segment[1].y)/2\n\t};\n}\n\nexport function getIntersectionSegment(c1, c2, d){\n\tconst s = c1.r + c2.r - d;\n\tconst l = c1.r - s;\n\tconst k = c2.r - s; //why am I not using this? TODO:investigate\n\tconst uc1c2 = [(c2.x - c1.x) / d, (c2.y - c1.y) / d]; //unit vector from c1 to c2\n\tconst uc2c1 = uc1c2.map(c => -c); //invert unit vector (unit vector from c2 to c1)\n\tconst a = {x: c1.x + l * uc1c2[0], y: c1.y + l * uc1c2[1]};\n\tconst b = {x: c2.x + l * uc2c1[0], y: c2.y + l * uc2c1[1]};\n\treturn [a, b];\n}\n\nexport function latLongToCartesian(lat, long, lat0){\n\tif(!lat0){\n\t\tlat0 = lat;\n\t}\n\tconst R = 6371e3; \n\tconst longRad = long * (Math.PI/180);\n\tconst latRad = lat * (Math.PI/180);\n\tconst lat0Rad = lat0 * (Math.PI/180);\n\tconst x = R * longRad * Math.cos(lat0Rad);\n\tconst y = R * latRad;\n\treturn {x, y};\n}\n\nexport function cartesianToLatLong(x, y, lat0){\n\tconst R = 6371e3; \n\tconst lat0Rad = lat0 * (Math.PI/180);\n\tconst longRad = x/(R*Math.cos(lat0Rad));\n\tconst latRad = y/R;\n\tconst latitude = latRad / (Math.PI/180);\n\tconst longitude = longRad / (Math.PI/180);\n\treturn {latitude, longitude};\n}\n\n/*\nDISTANCE BETWEEN POINTS\n*/\n//naive pythagora for flat earthers\nexport function distanceCartesian(a, b){\n\tlet v = a.y - b.y;\n\tlet u = a.x - b.x;\n\treturn Math.sqrt(v * v + u * u);\n}\n\n//https://www.movable-type.co.uk/scripts/latlong.html\nexport function distanceLatLongPythagora(a, b){\n\tconst R = 6371e3;\n\tconst x = (b.longitude - a.longitude) * Math.cos((a.latitude + b.latitude)/2);\n\tconst y = (b.latitude - a.latitude);\n\treturn Math.sqrt(x*x + y*y) * R;\n}\n\n//https://www.movable-type.co.uk/scripts/latlong.html\nexport function distanceLatLongHaversine(a, b){\n\tvar R = 6371e3;\n\tvar φ1 = a.latitude * (Math.PI/180);\n\tvar φ2 = b.latitude * (Math.PI/180);\n\tvar Δφ = (b.latitude-a.latitude) * (Math.PI/180);\n\tvar Δλ = (b.longitude-a.longitude) * (Math.PI/180);\n\n\tvar a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\n\t\t\tMath.cos(φ1) * Math.cos(φ2) *\n\t\t\tMath.sin(Δλ/2) * Math.sin(Δλ/2);\n\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n\tvar d = R * c;\n\treturn d;\n}\n\n//given point P on a line and [A, B] a segment on the same line, is P between\n//segment bounds?\nexport function isPointBetween(P, [A, B]){\n\tlet dotProd = (A.x - P.x) * (A.x - B.x) + (A.y - P.y) * (B.y - A.y);\n\tif(dotProd < 0){\n\t\treturn false;\n\t}\n\n\tlet abSquareDist = (A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y);\n\tif(dotProd > abSquareDist){\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function isCircleIntersectingCircle(C1, r1 ,C2 , r2){\n\tif(distanceCartesian(C1, C2) > r1 + r2){\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n//given a circle with center at point C and radius r, and a segment [A, B], \n//does the segment ntersect the circle?\nexport function isSegmentIntersectingCircle(C, r, [A, B]){\n\t//let P = projection of C on (A,B) \n\tlet P = pointProjectionOnLine(C, [A, B]);\n\t//if radius is smaller than the distance between C and its projections, then\n\t//the circle is too far away\n\tlet d = distanceCartesian(C, P);\n\t//console.log('distance between C, P', d);\n\tif(isNaN(d)){\n\t\treturn false;\n\t}\n\n\tif(d > r){\n\t\treturn false;\n\t}\n\n\t//check if  P is between [A, B];\n\tif(!isPointBetween(P, [A, B])){\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n//given an array of paths and an array of circles, return their intersections\nexport function getIntersections(paths, devices){\n\tlet res = [];\n\tfor(let i = 0, n = paths.length; i < n; i++){\n\t\tfor(let j = 0, m = devices.length; j < m; j++){\n\t\t\tif(isSegmentIntersectingCircle(devices[j], devices[j].r, paths[i])){\n                res.push({device: devices[j], path: paths[i], pathIndex: i, deviceIndex: j});\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n\nconst geometryHelper = {\n\tgetIntersections,\n\tisSegmentIntersectingCircle,\n\tisPointBetween,\n\tdistanceCartesian,\n\tpointProjectionOnLine,\n\tlatLongToCartesian,\n\tcartesianToLatLong,\n\tisCircleIntersectingCircle\n}\n\nexport default geometryHelper;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAPA;AAUA;AACA;AAEA;AACA;AACA;AACA;AAAA;AALA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAVA;AACA;AAsBA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAtDA;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;A","sourceRoot":""}