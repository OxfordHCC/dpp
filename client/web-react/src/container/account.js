import { html, gel, gell, deNormCoord, htmlCompile } from '../lib/util.js';
import db from '../lib/store.js';
import credentials from '../lib/credentials.js';
import style from '../style/account.css';
import native from '../lib/native';
import WebInterface from '../lib/native/web.js';
import settings from '../lib/settings';
import Page from '../components/page.js';
import '../components/conditional.js';


//TODO: reverse file processing for location import
const template = (params) => htmlCompile`
<page class="account">
	<a href="#map">Back</a>
	<h2>Import</h2>
	<div id="native-settings">
		Location service:
		<fosh-conditional id="native-location" on="enabled">
			<button slot="false" id="native-loc-start">Start</button>
			<button slot="true" id="native-loc-stop">Stop</button>
		</fosh-conditional>

		<fosh-conditional id="native-proximity" on="enabled">
			<button slot="false" id="native-proximity-start">Start</button>
			<button slot="true" id="native-proximity-stop">Stop</button>
		</fosh-conditional>

	</div>
	<div id="import-container">
		<div id="google">
			<h3>Import Google Location History</h3>
			Download your google location data and import file from ./Takeout/Location History.json (after unzipping).
			<div>
				<input type="file" accept=".json">
			</div>
			<div>
				<div><span id="import-progress-detail"></span></div>
				<div>Progress: <span id="import-progress"></span></div>
				<div><button id="stop-import">Stop</button></div>
				<div>
					<div id="import-log"></div>
				</div>
			</div>
		</div>
		<div id="raw">
			Import pTracker db, as generated by export (coming soon)
		</div>
		<div id="manifest">
			Import privacy_manifest file (coming soon)
		</div>
	</div>
	<hr>
	<div>
		<h2>Export</h2>
		Export coming soon
	</div>
	<hr>
		<h2>Mock personal devices</h2>
	<hr>
	<h2>API Keys</h2>
	<div>
		<a href="https://manage.thunderforest.com/dashboard">Thunderforest</a>
		<input data-api="thunderforest" type="text" id="thunderforest" size="64">
	</div>
	<div>
		<a href="https://openrouteservice.org/dev/#/home">openrouteservice</a>
		<input data-api="openrouteservice" type="text" id="openrouteservice" size="64">
	</div>
	<button id="update-api">Update</button>
	<hr>
	<h2>Database stats</h2>
	<ul id="database-list"></ul>
	<hr>
</page>`;


// export default { template, style, after: (page) => {} };
const accountPage = new Page({template});

export default({
	component: accountPage,
	after: (page) => {
		const fileInput = gel`input[type="file"]`;
		const apiInputs = gell`input[data-api]`;
		const updateAPIButton = gel`#update-api`;
		const stopImportButton = gel`#stop-import`;
		const importProgressSpan = gel`#import-progress`;
		const importDetailsSpan = gel`#import-progress-detail`;
		const importLog = gel`#import-log`;
		const databaseList = gel`#database-list`;
		const nativeLocation = gel`#native-location`;
		const nativeProximity = gel`#native-proximity`;

		nativeProximity.enabled = false;
		nativeLocation.enabled = false;

		if(native instanceof WebInterface){
			nativeProximity.style.visibility = "hidden";
		}

		const logBufferSize = 100; //lines
		const state = {
			stopImport: false
		};

		db.tables.forEach(async (table) => {
			const dbLi = document.createElement('li');
			dbLi.textContent = `${table.name}: ${(await db[table.name].count())} entries`;
			databaseList.appendChild(dbLi);
		});
		
		fileInput.onchange = () => importHistory(fileInput.files[0], state, {
			onClose: () => {
				console.log('on close called');
				importDetailsSpan.textContent = '';
				importProgressSpan.textContent = "Stopped!";
				fileInput.value = null;
			},
			onLog: (str) => {
				let line = document.createElement('div');
				line.textContent = `${Date.now()} > ${str}`;
				importLog.appendChild(line);
			},
			onReadChunk: (chunkCount) => {
				importProgressSpan.textContent = `Reading chunk ${chunkCount}`;
			},
			onStart: (chunkSize) => {
				importLog.innerHTML = "";
				console.log('Started import...');
				let chunkNo = Math.ceil(fileInput.files[0].size / chunkSize);

				importDetailsSpan.textContent = `
					Reading file of size ${fileInput.files[0].size}
					Chunk read size: ${chunkSize} bytes
					Reading ${chunkNo} chunks...
				`;
			}
		});

		stopImportButton.onclick = () => {
			console.log('clicked stopImport');
			state.stopImport = true;
		}
		updateAPIButton.onclick = () => {
			apiInputs.forEach(input => credentials.setKey(input.dataset.api, input.value.trim()));
		}
	}
})


